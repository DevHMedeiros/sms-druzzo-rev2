name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    name: ÔøΩÔøΩ Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci || npm install

    - name: Run tests
      run: |
        npm test || echo "No tests configured yet"

    - name: Run linting
      run: |
        npm run lint || echo "No linting configured yet"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    name: üèóÔ∏è Build & Push
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    name: üöÄ Deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to Portainer
      run: |
        curl -X POST "${{ secrets.PORTAINER_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d '{
            "registry": "${{ env.REGISTRY }}",
            "image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          }'